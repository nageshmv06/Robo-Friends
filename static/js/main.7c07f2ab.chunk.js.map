{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/Scroll.js","Components/SearchBox.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","Robots","map","user","i","key","Scroll","props","style","overflowX","borderTop","height","children","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","Robot","toLowerCase","includes","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4OAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACxB,OACK,yBAAKC,UAAW,uDAChB,yBAAKC,IAAI,SAASC,IAAG,+BAA2BL,EAA3B,mBACrB,6BACE,4BAAKC,GACL,2BAAIC,MCcGI,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACU,6BAEGA,EAAOC,KAAI,SAACC,EAAMC,GACtB,OACC,kBAAC,EAAD,CACEC,IAAKD,EACNV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCHdU,EARA,SAACC,GACf,OACI,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,UAAW,kBAAmBC,OAAQ,UACvEJ,EAAMK,WCUEC,EAbG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aACjC,OACC,yBAAKlB,UAAU,OACN,2BACAA,UAAU,mCACVmB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCqCNI,G,wDAvCZ,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SAb1C,EAAKC,MAAQ,CAChBxB,OAAQ,GACRa,YAAa,IAJC,E,gEAOQ,IAAD,OACnBY,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACrB,OAAQ6B,S,+BAOjC,IAAD,EAC6BC,KAAKN,MAA5BxB,EADN,EACMA,OAAQa,EADd,EACcA,YACXkB,EAAiB/B,EAAOgC,QAAO,SAAAC,GAC/B,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAStB,EAAYqB,kBAE1D,OAAQlC,EAAOoC,OAGT,yBAAKxC,UAAW,MAChB,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWkB,aAAcgB,KAAKX,iBAC9B,kBAAC,EAAD,KACQ,kBAAC,EAAD,CAAUnB,OAAQ+B,MAN/B,8C,GAxBUM,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACK,kBAAC,EAAD,OAELC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7c07f2ab.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n\treturn (\r\n      <div className ='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt='Robots' src= {`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n      </div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ Robots }) => {\r\n\treturn(\r\n           <div>\r\n           {\r\n  \t           Robots.map((user, i) => {\r\n\t\t        return (\r\n\t\t         <Card \r\n\t\t           key={i}\r\n\t\t          id={Robots[i].id} \r\n\t\t          name={Robots[i].name} \r\n\t\t          email={Robots[i].email}\r\n\t\t          />\r\n\t\t      )\r\n\t\t     }) \r\n  \t       }\r\n           </div>\r\n\t\t)\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n     <div style={{ overflowX: 'scroll', borderTop: '1px solid black', height: '800px' }}>\r\n\t     {props.children} \r\n\t</div>\r\n\t)\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n           <input \r\n           className='pa3 ba b--green bg-lightest-blue'\r\n           type='search' \r\n           placeholder='Search Robots'\r\n           onChange={searchChange}\r\n           />\t\t\t\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport Scroll from '../Components/Scroll';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n   constructor() {\r\n   \t   super()\r\n   \t  this.state = {\r\n\t  Robots: [],\r\n\t  searchfield: ''\r\n  }\r\n}\r\n    componentDidMount() {\r\n    \tfetch('https://jsonplaceholder.typicode.com/users')\r\n    \t.then(response => response.json())\r\n    \t.then(users => this.setState({Robots: users}))\r\n    \t\r\n    }\r\n\r\n   onSearchChange = (event) => {\r\n   \t   this.setState({searchfield: event.target.value});\r\n   }\r\n\trender(){\r\n\t\t      const {Robots, searchfield} = this.state;\r\n\t\t    const filteredRobots = Robots.filter(Robot => {\r\n       \t    return Robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n             });\r\n\t\t     return !Robots.length ?  //ternary operator\r\n\t\t    \t <h1>LOADING...</h1> :\r\n\t      \t     (\r\n\t\t           <div className= 'tc'>\r\n\t\t           <h1 className='f1'>Robo-Friends</h1>\r\n\t\t           <SearchBox searchChange={this.onSearchChange} />\r\n\t\t           <Scroll>\r\n                     <CardList Robots={filteredRobots} />\r\n                   </Scroll> \r\n                   </div>\r\n\t\t          );\t    \t\r\n\t\t   \r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n       <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}